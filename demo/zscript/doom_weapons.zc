class PistolCasing : ZCasing
{
    Default
    {
        Scale 0.18;
        BounceSound "weapons/casing1";
    }

    States
    {
    Spawn:
        CAS2 ABCDEFGH 2;
        Loop;
    Death:
        CAS2 G -1;
        Stop;
    }
}

class PistolEmptyMag : ZCasing
{
    Default
    {
        Scale 0.5;
        BounceSound "weapons/emptyMagazine";
    }

    States
    {
    Spawn:
        CLP1 ABCDEF 3;
    Death:
        CLP1 A -1;
        Stop;
    }
}


class ShotgunCasing : ZCasing
{
    Default
    {
        Scale 0.24;
        BounceSound "weapons/casing2";
    }

    States
    {
    Spawn:
        REDC ABCDEFGH 2;
        Loop;
    Death:
        REDC G -1;
        Stop;
    }
}

class ChaingunLink : ZCasing
{
    Default
    {
        Scale 0.07;
    }

    States
    {
    Spawn:
        BULN ABCDE 2;
        Loop;
    Death:
        BULN E -1;
        Stop;
    }
}

class ChaingunTracer : ZTracer
{
    Default
    {
        Speed 100;
        ZBullet.AirFriction 1;
        +NoGravity
    }
}


class RifleBullet : ZTracer
{
    Default
    {
        Speed 400;
        Damage 16;
        ZTracer.Colors 0xff6666, 0x440000;

        +StrifeDamage;
    }

    States
    {
    Spawn:
        TNT1 A 1 Light("RedTracerGlow");
        Loop;
    }
}

class RifleCasing : ZCasing
{
    Default
    {
        Scale 0.18;
        BounceSound "weapons/casing1";
    }

    States
    {
    Spawn:
        CAS7 ABCDEFGH 2;
        Loop;
    Death:
        CAS7 G -1;
        Stop;
    }
}


class ZPistol : ZWeapon replaces Pistol
{
	Default
	{
		Weapon.SelectionOrder 1900;
		Weapon.AmmoUse1 1;
		Weapon.AmmoType1 "Clip";
        Weapon.AmmoGive 8;

        ZWeapon.MagazineSize 7;
        ZWeapon.ReloadSound "misc/w_pkup";
        ZWeapon.ClickSound "weapons/emptyClick";

		Obituary "$OB_MPPISTOL";
		+WEAPON.WIMPY_WEAPON
		Inventory.Pickupmessage "$PICKUP_PISTOL_DROPPED";
		Tag "$TAG_PISTOL";

        AttackSound "weapons/pistol";
	}

	States
	{
	Ready:
		PKPI A 1 ZWL_WeaponReady(ZRF_ExtraRound);
		Loop;
	Deselect:
		PKPI A 1 A_Lower;
		Loop;
	Select:
		PIST A 2 ZWL_QuickRaise();
        PIST BCD 2;
		Goto Ready;
	Fire:
		PKPF A 2 Bright
        {
            ZWL_FireHitscan(3, 5 * Random(1, 3));
            A_Light(1);
        }
		PKPI B 2
        {
            ZWL_EjectCasing("PistolCasing");
            A_Light(0);

            return ZWL_JumpIfEmpty("Fire.Empty");
        }
		PKPI C 2;
        PKPI DDEEFF 1 ZWL_ReFire(null, false);
		Goto Ready;
    Fire.Empty:
        PKPE ABCD 2;
        PKPE E 8;
        TNT1 A 0 ZWL_CheckReload();
        Goto Reload.Empty;
    Reload:
        TNT1 A 0 ZWL_JumpIfEmpty("Reload.Empty");
        PKR2 ABCDE 2;
        PKR2 F 2 ZWL_EjectCasing("PistolEmptyMag", true, 45, 2, 16, (24, 0, -24));
        PKR2 GHI 2;
        PKR2 J 2 ZWL_Reload(-1);
        PKR2 KL 2;
        PKPR MNOPQ 2;
        Goto Ready;
    Reload.Empty:
        PKPR ABCDE 2;
        PKPR F 2 ZWL_EjectCasing("PistolEmptyMag", true, 45, 2, 16, (24, 0, -24));
        PKPR GHI 2;
        PKPR J 2 ZWL_Reload;
        PKPR KL 2;
        PKPR MNOPQ 2;
        Goto Ready;
 	Spawn:
		23PT A -1;
		Stop;
	}
}


class ZShotgun : ZWeapon replaces Shotgun
{
    Default
	{
		Weapon.SelectionOrder 1300;
		Weapon.AmmoUse 1;
		Weapon.AmmoType "Shell";
        Weapon.AmmoGive 8;

        ZWeapon.MagazineSize 7;
        ZWeapon.ReloadSound "weapons/shellLoad";
        ZWeapon.ClickSound "weapons/emptyClick";

		Inventory.PickupMessage "$GOTSHOTGUN";
		Obituary "$OB_MPSHOTGUN";
		Tag "$TAG_SHOTGUN";

        AttackSound "weapons/shotgf";
	}

	States
	{
	Ready:
		SHTG A 1 ZWL_WeaponReady(ZRF_ExtraRound);
		Loop;

	Deselect:
		SHTG A 1 A_Lower;
		Loop;

	Select:
		SGUW A 2 ZWL_QuickRaise();
        SGUN ABCDEF 2;
		Goto Ready;

	Fire:
		SHTF A 2 Bright
        {
            ZWL_FireHitscan(2, 5 * Random(1, 3), pellets:7, spread:5);
            A_Light(1);
        }
		SHTF B 2 A_Light(0);
		SHTF CDEF 2;
        SHTG B 2 ZWL_CheckReload();
        SHTG CDEFG 2;
        SHTG H 2 ZWL_EjectCasing("ShotgunCasing");
        SHTG IJIHGFEDCB 2;
        Goto Ready;

    Reload:
        TNT1 A 0 ZWL_JumpIfEmpty("Reload.Empty");
        SHTG BCDEFG 2;
        // Fallthrough
    Reload.Loop:
        SHTR ABCDE 2;
        SHTR F 2 ZWL_Reload(1);
        SHTR GH 2;
        SHTR I 2;
        SHTR I 0 ZWL_JumpIfReloaded("Reload.End", true, true);
        Loop;
    Reload.End:
        SHTG GFEDCB 2;
        Goto Ready;

    Reload.Empty:
        SHTG BCDEFG 2;
        // Fallthrough
    Reload.Empty.Loop:
        SHTR ABCDE 2;
        SHTR F 2 ZWL_Reload(1);
        SHTR GH 2;
        SHTR I 2;
        SHTR I 0 ZWL_JumpIfReloaded("Reload.Empty.End", true);
        Loop;
    Reload.Empty.End:
        SHTG BCDEFG 2;
        SHTG H 2
        {
            ZWL_EjectCasing("ShotgunCasing");
            A_PlaySound("weapons/shotgr", CHAN_WEAPON);
        }
        SHTG IJIHGFEDCB 2;
        Goto Ready;

	Spawn:
		SHOT A -1;
		Stop;
	}
}


class ZChaingun : ZWeapon replaces Chaingun
{
    bool spinning;

	Default
	{
		Weapon.SelectionOrder 700;
		Weapon.AmmoUse 1;
		Weapon.AmmoGive 20;
		Weapon.AmmoType "Clip";

        ZWeapon.AttackSustain "weapons/minigunLoop", 0.175*sec;
        ZWeapon.AttackRelease "weapons/minigunRelease";
        ZWeapon.ClickSound "weapons/emptyClick";

		Inventory.PickupMessage "$GOTCHAINGUN";
		Obituary "$OB_MPCHAINGUN";
		Tag "$TAG_CHAINGUN";
	}

	States
	{
	Ready:
		CHAG A 1 ZWL_WeaponReady;
		Loop;
	Deselect:
        TNT1 A 0
        {
            if (invoker.spinning)
                return ResolveState("SpinDown");

            return ResolveState(null);
        }
		CHAG A 1 A_Lower;
		Loop;
	Select:
		MGRS ABCDE 2 ZWL_QuickRaise;
		Goto Ready;
	Fire:
        CHAG A 2
        {
            A_PlaySound("weapons/minigunSpinUp", CHAN_Body);
            invoker.spinning = true;
        }
        CHAG BCD 2;
        TNT1 A 0 ZWL_ReFire;
        Goto SpinDown;
    Hold:
        CHAF A 1 Bright
        {
            A_PlaySound("weapons/minigunSpin", CHAN_Body, looping:true);
            ZWL_FireHitscan(2, 5 * Random(1, 3), fireRate:3000*rpm, tracerType:"ChaingunTracer", tracerFreq:9);
            ZWL_EjectCasing("RifleCasing", true, -23, 8, 16, (24, 0, -16));
            ZWL_EjectCasing("ChaingunLink", true, -23, 8, 16, (24, 0, -16));
            A_Light(2);
        }
        CHAG BCD 1 ZWL_ReFire("Hold2");
		Goto SpinDown;
    Hold2:
        CHAF B 1
        {
            ZWL_FireHitscan(2, 5 * Random(1, 3), fireRate:3000*rpm, tracerType:"ChaingunTracer", tracerFreq:9);
            ZWL_EjectCasing("RifleCasing", true, -23, 8, 16, (24, 0, -16));
            ZWL_EjectCasing("ChaingunLink", true, -23, 8, 16, (24, 0, -16));
            A_Light(1);
        }
        CHAG CD 1 ZWL_ReFire("Hold3");
		Goto SpinDown;
    Hold3:
        CHAF C 1
        {
            ZWL_FireHitscan(2, 5 * Random(1, 3), fireRate:3000*rpm, tracerType:"ChaingunTracer", tracerFreq:9);
            ZWL_EjectCasing("RifleCasing", true, -23, 8, 16, (24, 0, -16));
            ZWL_EjectCasing("ChaingunLink", true, -23, 8, 16, (24, 0, -16));
            A_Light(0);
        }
        CHAG D 1 ZWL_ReFire("Hold4");
		Goto SpinDown;
    Hold4:
        CHAF D 1 Bright
        {
            ZWL_FireHitscan(2, 5 * Random(1, 3), fireRate:3000*rpm, tracerType:"ChaingunTracer", tracerFreq:9);
            ZWL_EjectCasing("RifleCasing", true, -23, 8, 16, (24, 0, -16));
            ZWL_EjectCasing("ChaingunLink", true, -23, 8, 16, (24, 0, -16));
            A_Light(2);
        }
        CHAG A 0 ZWL_ReFire("Hold5");
		Goto SpinDown;
    Hold5:
        CHAF E 1
        {
            ZWL_FireHitscan(2, 5 * Random(1, 3), fireRate:3000*rpm, tracerType:"ChaingunTracer", tracerFreq:9);
            ZWL_EjectCasing("RifleCasing", true, -23, 8, 16, (24, 0, -16));
            ZWL_EjectCasing("ChaingunLink", true, -23, 8, 16, (24, 0, -16));
            A_Light(1);
        }
        CHAG BCD 1 ZWL_ReFire("Hold6");
		Goto SpinDown;
    Hold6:
        CHAF F 1
        {
            ZWL_FireHitscan(2, 5 * Random(1, 3), fireRate:3000*rpm, tracerType:"ChaingunTracer", tracerFreq:9);
            ZWL_EjectCasing("RifleCasing", true, -23, 8, 16, (24, 0, -16));
            ZWL_EjectCasing("ChaingunLink", true, -23, 8, 16, (24, 0, -16));
            A_Light(0);
        }
        CHAG CD 1 ZWL_ReFire("Hold7");
		Goto SpinDown;
    Hold7:
        CHAF G 1 Bright
        {
            ZWL_FireHitscan(2, 5 * Random(1, 3), fireRate:3000*rpm, tracerType:"ChaingunTracer", tracerFreq:9);
            ZWL_EjectCasing("RifleCasing", true, -23, 8, 16, (24, 0, -16));
            ZWL_EjectCasing("ChaingunLink", true, -23, 8, 16, (24, 0, -16));
            A_Light(2);
        }
        CHAG D 1 ZWL_ReFire("Hold8");
		Goto SpinDown;
    Hold8:
        CHAF H 1
        {
            ZWL_FireHitscan(2, 5 * Random(1, 3), fireRate:3000*rpm, tracerType:"ChaingunTracer", tracerFreq:9);
            ZWL_EjectCasing("RifleCasing", true, -23, 8, 16, (24, 0, -16));
            ZWL_EjectCasing("ChaingunLink", true, -23, 8, 16, (24, 0, -16));
            A_Light(1);
        }
        CHAG A 0 ZWL_ReFire("Hold9");
		Goto SpinDown;
    Hold9:
        CHAF I 1
        {
            ZWL_FireHitscan(2, 5 * Random(1, 3), fireRate:3000*rpm, tracerType:"ChaingunTracer", tracerFreq:9);
            ZWL_EjectCasing("RifleCasing", true, -23, 8, 16, (24, 0, -16));
            ZWL_EjectCasing("ChaingunLink", true, -23, 8, 16, (24, 0, -16));
            A_Light(0);
        }
        CHAG BCD 1 ZWL_ReFire;
		Goto SpinDown;
    SpinDown:
        CHAG A 1
        {
            ZWL_StopAttackLoop();
            A_PlaySound("weapons/minigunSpinDown", CHAN_Body);
        }
        CHAG BCDABCDABCDABCD 1;
        CHAG ABCD 2;
        TNT1 A 0
        {
            invoker.spinning = false;
        }
        Goto Ready;
	Spawn:
		MNGN A -1;
		Stop;
	}
}


class ZRocketLauncher : ZWeapon replaces RocketLauncher
{
	Default
	{
		Weapon.SelectionOrder 2500;
		Weapon.AmmoUse 1;
		Weapon.AmmoGive 2;
		Weapon.AmmoType "RocketAmmo";
		+WEAPON.NOAUTOFIRE
		Inventory.PickupMessage "$GOTLAUNCHER";
		Tag "$TAG_ROCKETLAUNCHER";
	}
	States
	{
	Ready:
		MISG A 1 ZWL_WeaponReady;
		Loop;
	Deselect:
		MISG A 1 A_Lower;
		Loop;
	Select:
		MISG A 1 A_Raise;
		Loop;
	Fire:
		MISG B 8 A_GunFlash;
		MISG B 12 ZWL_FireProjectile("Rocket", 3);
		MISG B 0 ZWL_ReFire;
		Goto Ready;
	Flash:
		MISF A 3 Bright A_Light1;
		MISF B 4 Bright;
		MISF CD 4 Bright A_Light2;
		Goto LightDone;
	Spawn:
		LAUN A -1;
		Stop;
	}
}


class ZPlasmaRifle : ZWeapon replaces PlasmaRifle
{
	Default
	{
		Weapon.SelectionOrder 100;
		Weapon.AmmoUse 1;
		Weapon.AmmoGive 40;
		Weapon.AmmoType "Cell";
		Inventory.PickupMessage "$GOTPLASMA";
		Tag "$TAG_PLASMARIFLE";
	}

	States
	{
	Ready:
		PLSG A 1 ZWL_WeaponReady;
		Loop;
	Deselect:
		PLSG A 1 A_Lower;
		Loop;
	Select:
		PLSG A 1 A_Raise;
		Loop;
	Fire:
		PLSG AAA 1 ZWL_FireProjectile("PlasmaBall", 2, 625 * rpm, flags:ZPF_AddPlayerVel);
		PLSG B 20 A_ReFire;
		Goto Ready;
	Flash:
		PLSF A 4 Bright A_Light1;
		Goto LightDone;
		PLSF B 4 Bright A_Light1;
		Goto LightDone;
	Spawn:
		PLAS A -1;
		Stop;
	}
}


class ZSniperRifle : ZWeapon
{
    double zoomFactor;

    Default
    {
        Scale 0.8;
        AttackSound "weapons/sniperFire";
        Weapon.SelectionOrder 1000;
        Weapon.AmmoUse 1;
        Weapon.AmmoGive 10;
        Weapon.AmmoType "Clip";
    }

    override void PostBeginPlay()
    {
        Super.PostBeginPlay();

        zoomFactor = 1.0;
    }

    States
    {
    Ready:
        SNPG A 1 ZWL_WeaponReady;
        Loop;

    Deselect:
        SNPG A 1 A_Lower;
        Wait;
    Select:
        SNPG A 1 A_Raise;
        Wait;

    Fire:
        TNT1 A 0
        {
            if (invoker.zoomFactor > 1)
                return ResolveState("Zoom.Fire");
            return ResolveState(null);
        }

        SNPF A 2 Bright
        {
            ZWL_FireProjectile("RifleBullet", 0, -1, null, 1, (0, 8, 0));
            A_Light(2);
        }
        SNPF B 2 Bright A_Light(1);
        SNPF CDE 3 A_Light(0);
        SNPG ABC 3;
        SNPG DEF 2;
        SNPG H 2 A_PlaySound("weapons/sniperBolt1", CHAN_Body);
        SNPG IJ 2;
        SNPG K 3 ZWL_EjectCasing("RifleCasing", false, -45, 4, 8, (24, 8, -10));
        SNPG JI 2;
        SNPG H 2 A_PlaySound("weapons/sniperBolt2", CHAN_Body);
        SNPG FED 3;
        SNPG CB 4;
        Goto Ready;

    Zoom:
        SNPS A 4
        {
            if (invoker.zoomFactor == 1)
                invoker.zoomFactor = 4;
            else if (invoker.zoomFactor == 4)
                invoker.zoomFactor = 8;
            else
                invoker.zoomFactor = 1;

            A_ZoomFactor(invoker.zoomFactor);
            Console.Printf("%dx", invoker.zoomFactor);

            if (invoker.zoomFactor == 1)
                return ResolveState("Ready");
            return ResolveState(null);
        }
        // Fallthrough
    Zoom.Scope:
        SNPS A 1 ZWL_WeaponReady;
        Loop;
    Zoom.Fire:
        SNPS A 2
        {
            ZWL_FireProjectile("RifleBullet", 0, -1, null, 1, (0, 0, 8));
            A_Light(2);
        }
        SNPS A 2 A_Light(1);
        SNPS A 24 A_Light(0);
        SNPS A 6 A_PlaySound("weapons/sniperBolt1", CHAN_Body);
        SNPS A 7 ZWL_EjectCasing("RifleCasing");
        SNPS A 19 A_PlaySound("weapons/sniperBolt2", CHAN_Body);
        Goto Zoom.Scope;

    Spawn:
        SNPP A -1;
        Stop;
    }
}


class ZWeaponPlayer : DoomPlayer
{
    Default
    {
        Player.StartItem "ZPistol";
        Player.StartItem "Fist";
        Player.StartItem "Clip", 50;

        Player.WeaponSlot 2, "ZPistol";
        Player.WeaponSlot 3, "ZShotgun", "ZSuperShotgun";
        Player.WeaponSlot 4, "ZSniperRifle", "ZChaingun";
        Player.WeaponSlot 5, "ZRocketLauncher";
        Player.WeaponSlot 6, "ZPlasmaRifle";
    }

    States
    {
    Spawn:
        SNPP A -1;
        Stop;
    }
}
